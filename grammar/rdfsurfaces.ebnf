/* converted on Sun Dec 1, 2024, 13:06 (UTC+01) by antlr_4-to-w3c v0.67 which is Copyright (c) 2011-2024 by Gunther Rademacher <grd@gmx.net> */

n3sDoc   ::= statement* EOF
statement
         ::= directive
           | triples '.'
directive
         ::= prefixID
           | base
           | sparqlPrefix
           | sparqlBase
prefixID ::= '@prefix' PNAME_NS IRIREF '.'
base     ::= '@base' IRIREF '.'
sparqlBase
         ::= BASE IRIREF
sparqlPrefix
         ::= PREFIX PNAME_NS IRIREF
triples  ::= subject predicateObjectList
           | blankNodePropertyList predicateObjectList?
           | surface
surface  ::= collection verb formula
graffiti ::= '(' BlankNode* ')'
predicateObjectList
         ::= verb objectList ( ';' ( verb objectList )? )*
objectList
         ::= object ( ',' object )*
verb     ::= predicate
           | 'a'
subject  ::= iri
           | BlankNode
           | collection
predicate
         ::= iri
object   ::= iri
           | BlankNode
           | collection
           | blankNodePropertyList
           | literal
literal  ::= rdfLiteral
           | NumericLiteral
           | BooleanLiteral
blankNodePropertyList
         ::= '[' predicateObjectList ']'
collection
         ::= '(' object* ')'
formula  ::= '{' ( triples ( '.' triples )* '.'? )? '}'
rdfLiteral
         ::= String ( LANGTAG | '^^' iri )?
iri      ::= IRIREF
           | prefixedName
prefixedName
         ::= PNAME_NS
           | PNAME_LN
_        ::= COMMENT
           | WS
          /* ws: definition */

<?TOKENS?>

COMMENT  ::= '#' [^#xa#xd]*
NumericLiteral
         ::= INTEGER
           | DECIMAL
           | DOUBLE
BooleanLiteral
         ::= 'true'
           | 'false'
String   ::= STRING_LITERAL_QUOTE
           | STRING_LITERAL_SINGLE_QUOTE
           | STRING_LITERAL_LONG_SINGLE_QUOTE
           | STRING_LITERAL_LONG_QUOTE
BlankNode
         ::= BLANK_NODE_LABEL
           | ANON
IRIREF   ::= '<' ( [^<>"{}|^`\#x0000-#x0020] | UCHAR )* '>'
PNAME_NS ::= PN_PREFIX? ':'
PNAME_LN ::= PNAME_NS PN_LOCAL
BLANK_NODE_LABEL
         ::= '_:' ( PN_CHARS_U | [0-9] ) ( ( PN_CHARS | '.' )* PN_CHARS )?
LANGTAG  ::= '@' [a-zA-Z]+ ( '-' [a-zA-Z0-9]+ )*
INTEGER  ::= [+#x2D]? [0-9]+
DECIMAL  ::= [+#x2D]? [0-9]* '.' [0-9]+
DOUBLE   ::= [+#x2D]? ( [0-9]+ ( '.' [0-9]* )? | '.' [0-9]+ ) EXPONENT
EXPONENT ::= [eE] [+#x2D]? [0-9]+
STRING_LITERAL_LONG_SINGLE_QUOTE
         ::= "'''" ( ( "'" | "''" )? ( [^'\] | ECHAR | UCHAR ) )* "'''"
STRING_LITERAL_LONG_QUOTE
         ::= '"""' ( ( '"' | '""' )? ( [^"\] | ECHAR | UCHAR ) )* '"""'
STRING_LITERAL_QUOTE
         ::= '"' ( [^#x0022#x005C#x000A#x000D] | ECHAR | UCHAR )* '"'
STRING_LITERAL_SINGLE_QUOTE
         ::= "'" ( [^#x0027#x005C#x000A#x000D] | ECHAR | UCHAR )* "'"
UCHAR    ::= ( '\u' | '\U' HEX HEX HEX HEX ) HEX HEX HEX HEX
ECHAR    ::= '\' [tbnrf"'\]
WS       ::= [#x0020#x0009#x000D#x000A]
ANON     ::= '[' WS* ']'
PN_CHARS_BASE
         ::= [A-Za-z#x00C0-#x00D6#x00D8-#x00F6#x00F8-#x02FF#x0370-#x037D#x037F-#x1FFF#x200C-#x200D#x2070-#x218F#x2C00-#x2FEF#x3001-#xD7FF#xF900-#xFDCF#xFDF0-#xFFFD]
PN_CHARS_U
         ::= PN_CHARS_BASE
           | '_'
PN_CHARS ::= PN_CHARS_U
           | [-0-9#xB7#x0300-#x036F#x203F-#x2040]
BASE     ::= ( 'B' | 'b' ) ( 'A' | 'a' ) ( 'S' | 's' ) ( 'E' | 'e' )
PREFIX   ::= ( 'P' | 'p' ) ( 'R' | 'r' ) ( 'E' | 'e' ) ( 'F' | 'f' ) ( 'I' | 'i' ) ( 'X' | 'x' )
PN_PREFIX
         ::= PN_CHARS_BASE ( ( PN_CHARS | '.' )* PN_CHARS )?
PN_LOCAL ::= ( PN_CHARS_U | [:0-9] | PLX ) ( ( PN_CHARS | '.' | ':' | PLX )* ( PN_CHARS | ':' | PLX ) )?
PLX      ::= PERCENT
           | PN_LOCAL_ESC
PERCENT  ::= '%' HEX HEX
HEX      ::= [0-9A-Fa-f]
PN_LOCAL_ESC
         ::= '\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )
EOF      ::= $